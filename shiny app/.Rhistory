#diag(rep(1,100))
V = 4*diag(n)
#solve(V)
Vinv =(1/4) *diag(n)
Bols = solve(t(xi)%*%xi) %*% t(xi) %*% y
Bgls = solve(t(xi)%*% Vinv %*%xi) %*% t(xi) %*% Vinv %*% y
n = 100
B0 = runif(n, -3, 3)
B1 = runif(n, -3, 3)
xi = runif(n, 0, 1)
X = cbind(rep(1, n), xi)
epsi = rnorm(n, 0, 2)
y = B0 + B1* xi + epsi
#diag(rep(1,100))
V = 4*diag(n)
#solve(V)
Vinv =(1/4) *diag(n)
Bols = solve(t(X)%*%xi) %*% t(X) %*% y
Bgls = solve(t(X)%*% Vinv %*%xi) %*% t(X) %*% Vinv %*% y
n = 100
B0 = runif(n, -3, 3)
B1 = runif(n, -3, 3)
xi = runif(n, 0, 1)
X = cbind(rep(1, n), xi)
epsi = rnorm(n, 0, 2)
y = B0 + B1* xi + epsi
#diag(rep(1,100))
V = 4*diag(n)
#solve(V)
Vinv =(1/4) *diag(n)
Bols = solve(t(X)%*%X) %*% t(X) %*% y
Bgls = solve(t(X)%*% Vinv %*%xi) %*% t(X) %*% Vinv %*% y
n = 100
B0 = runif(n, -3, 3)
B1 = runif(n, -3, 3)
xi = runif(n, 0, 1)
X = cbind(rep(1, n), xi)
epsi = rnorm(n, 0, 2)
y = B0 + B1* xi + epsi
#diag(rep(1,100))
V = 4*diag(n)
#solve(V)
Vinv =(1/4) *diag(n)
Bols = solve(t(X)%*%X) %*% t(X) %*% y
Bgls = solve(t(X)%*% Vinv %*% X) %*% t(X) %*% Vinv %*% y
varB = 4 * solve(t(X) %*% X)
View(varB)
?lm
modele = lm(xi~y)
View(modele)
View(Bgls)
View(modele)
View(Bols)
View(Bgls)
View(Bols)
n = 1000
B0 = runif(n, -3, 3)
B1 = runif(n, -3, 3)
xi = runif(n, 0, 1)
X = cbind(rep(1, n), xi)
epsi = rnorm(n, 0, 2)
y = B0 + B1* xi + epsi
#diag(rep(1,100))
V = 4*diag(n)
#solve(V)
Vinv =(1/4) *diag(n)
Bols = solve(t(X)%*%X) %*% t(X) %*% y
Bgls = solve(t(X)%*% Vinv %*% X) %*% t(X) %*% Vinv %*% y
# variance de B
varB = 4 * solve(t(X) %*% X)
#
modele = lm(xi~y)
View(Bgls)
View(Bols)
View(X)
X
n = 1000
B0 = runif(2, -3, 3)
B1 = runif(2, -3, 3)
xi = runif(n, 0, 1)
X = cbind(rep(1, n), xi)
epsi = rnorm(n, 0, 2)
y = B0 + B1* xi + epsi
#diag(rep(1,100))
V = 4*diag(n)
#solve(V)
Vinv =(1/4) *diag(n)
Bols = solve(t(X)%*%X) %*% t(X) %*% y
Bgls = solve(t(X)%*% Vinv %*% X) %*% t(X) %*% Vinv %*% y
# variance de B
varB = 4 * solve(t(X) %*% X)
#
modele = lm(xi~y)
n = 10000
source('~/Desktop/Donnée de panels/Untitled.R')
B0
n = 10000
B0 = runif(1, -3, 3)
B1 = runif(1, -3, 3)
xi = runif(n, 0, 1)
X = cbind(rep(1, n), xi)
epsi = rnorm(n, 0, 2)
y = B0 + B1* xi + epsi
#diag(rep(1,100))
V = 4*diag(n)
#solve(V)
Vinv =(1/4) *diag(n)
Bols = solve(t(X)%*%X) %*% t(X) %*% y
Bgls = solve(t(X)%*% Vinv %*% X) %*% t(X) %*% Vinv %*% y
# variance de B
varB = 4 * solve(t(X) %*% X)
#
modele = lm(xi~y)
sigma = (solve(y - X%*% Bols) %*% (y - X %*% Bols)) / n - 2
sigma = (t(y - X%*% Bols) %*% (y - X %*% Bols)) / n - 2
varBols = sigma ^2 * solve(t(X) %*% X)
varBgls = solve(t(X) %*% Vinv %*% X)
View(varB)
View(varBgls)
varBols = sigma ^2 * solve(t(X) %*% X)
varBgls = solve(t(X) %*% Vinv %*% X)
varBols = sigma^2 * solve(t(X) %*% X)
varBols = sigma * solve(t(X) %*% X)
varBgls = solve(t(X) %*% Vinv %*% X)
varBols = sigma * solve(t(X) %*% X)
varBols = sigma %*% solve(t(X) %*% X)
sigma
varBols = sigma * solve(t(X) %*% X)
varBols = vect(sigma) * solve(t(X) %*% X)
vector(sigma)
sigma[1]
varBols = sigma[1] * solve(t(X) %*% X)
modele = lm(xi~y)
summary(model)
# Modele
modele = lm(xi~y)
summary(modele)
# Modele
modele = lm(X~y)
summary(modele)
modele$residuals
modele$terms
summary(modele)
modele = lm(y ~X)
summary(modele)
sum_modele = summary(modele)
sum_modele$sigma
vcov(modele)
(sum_modele$sigma)¨
source('~/Desktop/Donnée de panels/Untitled.R')
source('~/Desktop/Donnée de panels/Untitled.R')
sum_modele$sigma
sigma = (t(y - X%*% Bols) %*% (y - X %*% Bols)) / n-2
# Modele
modele = lm(y ~X)
sum_modele = summary(modele)
# Modele
modele = lm(y ~ xi)
sum_modele = summary(modele)
sum_modele$sigma
sum_modele$sigma
xi
modele
sum_modele
sqrt(sigma)
vcov(modele)
sigma = (t(y - X%*% Bols) %*% (y - X %*% Bols)) / n-2
sum_modele$sigma
View(sigma)
sum_modele$sigma^2
sigma = (t(y - X%*% Bols) %*% (y - X %*% Bols)) / (n-2)
sigma
sigma = (t(y - X%*% Bols) %*% (y - X %*% Bols)) / (n-2)
V
# Modèle
modele = lm(y ~ xi)
sum_modele = summary(modele)
sum_modele$sigma^2
# variance de B
varBols = sigma[1] * solve(t(X) %*% X)
View(varBgls)
sum_modele$sigma^2
j = seq(1:10)
j
j = seq(1:10)
i = seq(1:N)
j = seq(1:10)
i = seq(1:n)
j = seq(1:10)
i = 6
?runif
?sample
j = seq(1:10)
Nj = sample(j,100)
Nj = sample(j,100, replace = TRUE)
Nk
Nj
aj = rnorm(Nj, 0,3)
aj
Yij = B0 + xi * B1 + aj + epsi
Yij
n = 100
j = seq(1:10)
Nj = sample(j,n, replace = TRUE)
aj = rnorm(Nj, 0,3)
Yij = B0 + xi * B1 + aj + epsi
Yij
n
n = 100
B0 = runif(1, -3, 3)
B1 = runif(1, -3, 3)
xi = runif(n, 0, 1)
X = cbind(rep(1, n), xi)
epsi = rnorm(n, 0, 2)
j = seq(1:10)
Nj = sample(j,n, replace = TRUE)
aj = rnorm(Nj, 0,3)
Yij = B0 + xi * B1 + aj + epsi
aj
aj = rnorm(10, 0,3)
aj
Yij = B0 + xi * B1 + aj + epsi
Yij
aj = rnorm(j, 0,3)
aj
j = seq(1:10)
Nj = sample(j,n, replace = TRUE)
aj = rnorm(j, 0,3)
Yij = B0 + xi * B1 + aj + epsi
Yij
j = seq(1:10)
fac = sample(j,n, replace = TRUE)
aj = rnorm(j, 0,3)
Yij = B0 + xi * B1 + aj + epsi
Yij = B0 + B1 * xi  + aj + epsi
fac
?rnom
?rnorm
aj = rnorm(j, 0,sqrt(3))
fac
aj
aj[8]
Yij = B0 + B1 * xi  + aj[xi] + epsi
Yij
xi
Yij = B0 + B1 * xi  + aj[fac] + epsi
Yij
aj[fac]
fac
Yij = B0 + B1 * xi  + aj[fac] + epsi
Yij
aj
Yij
aj[fac]
aj[8]
aj
fac = factor(sample(j,n, replace = TRUE))
Yij = B0 + B1 * xi  + aj[fac] + epsi
aj[fac]
aj[8]
?model.matrix
Xdesign =  model.matrix(Yij)
Xdesign =  model.matrix(~ xi +fac )
Xdesign
fac
Xdesign =  model.matrix(~ xi +fac-)
Xdesign =  model.matrix(~ xi +fac-1)
Xdesign
Xdesign =  model.matrix(~ xi +fac)
Xdesign
Xdesign =  model.matrix(~ xi +fac -1)
Xdesign
yij
Bchap = solve(t(Xdesign) %*% Xdesign)  %*% Xdesign  %*% Yij
Bchap = solve(t(Xdesign) %*% Xdesign)  %*% t(Xdesign)  %*% Yij
Bchap
varRes = (t(Yij - Xdesign%*% Bchap) %*% (Yij - Xdesign %*% Bchap)) / (n-11)
varRes
ancova = lm(Yij ~xi +fac)
ancova = lm(Yij ~xi +fac)
sum_ancova = summary(ancova)
sum_ancova$sigma^2
vcov(sum_ancova)
shinyApp(ui, server)
shiny::runApp('testing')
?write.csv
runApp('testing')
runApp('testing')
getwd()
shiny::runApp('Desktop/latest_version/marathon-web-5')
runApp('Desktop/latest_version/marathon-web-5')
shiny::runApp('Desktop/TER-Pub/shiny app')
source('~/Desktop/TER-Pub/shiny app/map.R')
getwd()
setwd("~/Desktop/TER-Pub/shiny app")
source('~/Desktop/TER-Pub/shiny app/map.R')
View(nb_click)
df = read.csv("data/data_one_month_cleaned_over_sampling.csv")
df$country_code = countrycode(df$Country_name,
origin = 'country.name',
destination = 'iso3c')
total_clicks  = sum(click)
nb_click = df %>%
dplyr::group_by(Country_name,
country_code) %>%
dplyr::summarise(total_click = sum(click),
total_win = dplyr::n(),
taux = round(total_click/total_clicks,2) *100) %>%
filter(total_click>0)
df = read.csv("data/data_one_month_cleaned_over_sampling.csv")
df$country_code = countrycode(df$Country_name,
origin = 'country.name',
destination = 'iso3c')
total_clicks  = sum(click)
total_clicks  = sum(df$click)
nb_click = df %>%
dplyr::group_by(Country_name,
country_code) %>%
dplyr::summarise(total_click = sum(click),
total_win = dplyr::n(),
taux = round(total_click/total_clicks,2) *100) %>%
filter(total_click>0)
View(nb_click)
nb_click = df %>%
dplyr::group_by(Country_name,
country_code) %>%
dplyr::summarise(total_click = sum(click),
total_win = dplyr::n(),
taux = round(total_click/total_clicks,3) *100) %>%
filter(total_click>0)
View(nb_click)
mean(nb_click$taux)
source('~/Desktop/TER-Pub/shiny app/map.R')
source('~/Desktop/TER-Pub/shiny app/map.R')
click
shiny::runApp()
runApp()
getwd()
runApp()
df = read.csv("data/data_one_month_cleaned_over_sampling.csv")
colnames(df)
df$device_type
colnames(df)
df$Timestamp_DayOfWeek
df$device_type_name = ifelse(df$device_type == "1", "Mobile/Tablet",
ifelse(df$device_type == "2",  "Personal Computer",
ifelse(df$device_type == "3", "Connected TV",
ifelse(df$device_type == "4" , "Phone",
ifelse(df$device_type == "5", "Tablet",
ifelse(df$device_type == "6", "Connected Device",
ifelse(df$device_type == "7", "Set Top Box",
ifelse(df$device_type == "unknown", "Unknown","Unknown"))))))))
df$device_type_name
unique(df$device_type_name)
unique(df$device_type)
is.numeric(df$Timestamp_DayOfWeek)
unique(df$Timestamp_DayOfWeek)
df$day = ifelse(df$Timestamp_DayOfWeek == 1, "Lundi",
ifelse(df$Timestamp_DayOfWeek == 2, "Mardi",
ifelse(df$Timestamp_DayOfWeek == 3, "Mercredi",
ifelse(df$Timestamp_DayOfWeek == 4, "Jeudi",
ifelse(df$Timestamp_DayOfWeek == 5, "Vendredi",
ifelse(df$Timestamp_DayOfWeek == 6, "Samedi",
ifelse(df$Timestamp_DayOfWeek == 7, "Dimanche", "Erreur")))))))
unique(df$day)
df$day <- factor(df$day, levels = c("Lundi", "Mardi", "Mercredi","Jeudi", "Vendredi", "Samedi", "Dimanche"))
unique(df$day)
clicks = df %>%
filter(click== 1)
nb_click = df %>%
dplyr::group_by(Country_name,
country_code) %>%
dplyr::summarise(total_click = sum(click),
total_win = dplyr::n(),
taux = round(total_click/total_clicks,3) *100) %>%
filter(total_click>0)
df = read.csv("data/data_one_month_cleaned_over_sampling.csv")
df$country_code = countrycode(df$Country_name,
origin = 'country.name',
destination = 'iso3c')
total_clicks  = sum(df$click)
nb_click = df %>%
dplyr::group_by(Country_name,
country_code) %>%
dplyr::summarise(total_click = sum(click),
total_win = dplyr::n(),
taux = round(total_click/total_clicks,3) *100) %>%
filter(total_click>0)
df$device_type_name = ifelse(df$device_type == "1", "Mobile/Tablet",
ifelse(df$device_type == "2",  "Personal Computer",
ifelse(df$device_type == "3", "Connected TV",
ifelse(df$device_type == "4" , "Phone",
ifelse(df$device_type == "5", "Tablet",
ifelse(df$device_type == "6", "Connected Device",
ifelse(df$device_type == "7", "Set Top Box",
ifelse(df$device_type == "unknown", "Unknown","Unknown"))))))))
df$day = ifelse(df$Timestamp_DayOfWeek == 1, "Lundi",
ifelse(df$Timestamp_DayOfWeek == 2, "Mardi",
ifelse(df$Timestamp_DayOfWeek == 3, "Mercredi",
ifelse(df$Timestamp_DayOfWeek == 4, "Jeudi",
ifelse(df$Timestamp_DayOfWeek == 5, "Vendredi",
ifelse(df$Timestamp_DayOfWeek == 6, "Samedi",
ifelse(df$Timestamp_DayOfWeek == 7, "Dimanche", "Erreur")))))))
df$day <- factor(df$day, levels = c("Lundi", "Mardi", "Mercredi","Jeudi", "Vendredi", "Samedi", "Dimanche"))
clicks = df %>%
filter(click== 1)
unique(df$Timestamp_hour)
test = df %>%
dplyr::group_by(Country_name,
country_code,
Timestamp_hour) %>%
dplyr::summarise(total_click = sum(click),
total_win = dplyr::n(),
taux = round(total_click/total_clicks,3) *100)
View(test)
test = df %>%
dplyr::group_by(Country_name,
country_code,
Timestamp_hour) %>%
dplyr::summarise(total_click = sum(click),
total_win = dplyr::n(),
taux = round(total_click/total_clicks,3) *100) %>%
filter(total_click >0)
View(test)
ggplotly(gglot(test, aes_string(x = test$Timestamp_hour , y = test$taux))+
geom_line(aes(color = test$country_code)) +
labs(y=paste("Proportion des clics"), x= "Heure", color ="Pays") +
scale_y_continuous(labels = percent))
ggplotly(ggplot(test, aes_string(x = test$Timestamp_hour , y = test$taux))+
geom_line(aes(color = test$country_code)) +
labs(y=paste("Proportion des clics"), x= "Heure", color ="Pays") +
scale_y_continuous(labels = percent))
test = df %>%
dplyr::group_by(Country_name,
country_code,
Timestamp_hour) %>%
dplyr::summarise(total_click = sum(click),
total_win = dplyr::n(),
taux = round(total_click/total_clicks,3)) %>%
filter(total_click >0)
ggplotly(ggplot(test, aes_string(x = test$Timestamp_hour , y = test$taux))+
geom_line(aes(color = test$country_code)) +
labs(y=paste("Proportion des clics"), x= "Heure", color ="Pays") +
scale_y_continuous(labels = percent))
test$country_code
runApp()
d
df = read.csv("data/data_one_month_cleaned_over_sampling.csv")
df$country_code = countrycode(df$Country_name,
origin = 'country.name',
destination = 'iso3c')
df$device_type_name = ifelse(df$device_type == "1", "Mobile/Tablet",
ifelse(df$device_type == "2",  "Personal Computer",
ifelse(df$device_type == "3", "Connected TV",
ifelse(df$device_type == "4" , "Phone",
ifelse(df$device_type == "5", "Tablet",
ifelse(df$device_type == "6", "Connected Device",
ifelse(df$device_type == "7", "Set Top Box",
ifelse(df$device_type == "unknown", "Unknown","Unknown"))))))))
df$day = ifelse(df$Timestamp_DayOfWeek == 1, "Lundi",
ifelse(df$Timestamp_DayOfWeek == 2, "Mardi",
ifelse(df$Timestamp_DayOfWeek == 3, "Mercredi",
ifelse(df$Timestamp_DayOfWeek == 4, "Jeudi",
ifelse(df$Timestamp_DayOfWeek == 5, "Vendredi",
ifelse(df$Timestamp_DayOfWeek == 6, "Samedi",
ifelse(df$Timestamp_DayOfWeek == 7, "Dimanche", "Erreur")))))))
df$day <- factor(df$day, levels = c("Lundi", "Mardi", "Mercredi","Jeudi", "Vendredi", "Samedi", "Dimanche"))
test = df %>%
dplyr::group_by(Country_name,
country_code,
Timestamp_hour) %>%
dplyr::summarise(total_click = sum(click),
total_win = dplyr::n(),
taux = round(total_click/total_clicks,3)) %>%
filter(total_click >0)
runApp()
total_clicks = sum(df$click)
test = df %>%
dplyr::group_by(Country_name,
country_code,
Timestamp_hour) %>%
dplyr::summarise(total_click = sum(click),
total_win = dplyr::n(),
taux = round(total_click/total_clicks,3)) %>%
filter(total_click >0)
unique(df$country_code)
View(test)
unique(df$Country_name)
arrange(unique(df$Country_name))
sort(unique(df$Country_name))
smt = sort(unique(df$Country_name))
smt
shiny::runApp()
runApp()
click = df %>%
filter(click ==1)
df$device_type
colnames(df)
df$fullOsInfo
unique(df$fullOsInfo)
colnames(df)
ggplot(df, aes(as.factor(click), fill = device_type_name)) +
geom_bar(position= "fill") +
stat_fill_labels() +
labs(x = "Clique", y ="Pourcentage de clicks", fill = "Type d'OS") +
scale_y_continuous(labels = percent)
runApp()
runApp()
runApp()
runApp()
total_clicks  = sum(df$click)
runApp()
